// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  sector     String?
  locale     String   @default("tr")
  styleTags  Json     @default("[]") // Array of style descriptors
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  brand        Brand?
  assets       Assets?
  content      Content?
  layout       Layout?
  generated    Generated[]
  exports      Export[]
  chatMessages ChatMessage[]
  
  @@map("projects")
}

model Brand {
  id           String  @id @default(cuid())
  projectId    String  @unique
  primary      String? // Primary brand color
  secondary    String? // Secondary brand color
  palette      Json    @default("[]") // Array of {slug, color, locked?, source?}
  headingFont  Json    @default("{}") // Font configuration
  bodyFont     Json    @default("{}") // Font configuration
  logoPath     String? // Path to uploaded logo
  
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("brands")
}

model Assets {
  id           String   @id @default(cuid())
  projectId    String   @unique
  heroPath     String?  // Hero image path
  galleryPaths Json     @default("[]") // Array of gallery image paths
  
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("assets")
}

model Content {
  id        String @id @default(cuid())
  projectId String @unique
  headline  String?
  benefits  Json   @default("[]") // Array of benefit objects
  cta       String? // Call-to-action text
  contact   Json   @default("{}") // {phone, whatsapp, address}
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("contents")
}

model Layout {
  id        String @id @default(cuid())
  projectId String @unique
  sections  Json   @default("[]") // Ordered array of section names
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("layouts")
}

model Generated {
  id           String   @id @default(cuid())
  projectId    String
  themeJson    Json     @default("{}") // WordPress theme.json
  patterns     Json     @default("[]") // Gutenberg block patterns
  templateFront String  @default("") // Front page template
  meta         Json     @default("{}") // Generation metadata
  createdAt    DateTime @default(now())
  
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("generated")
}

model Export {
  id        String      @id @default(cuid())
  projectId String
  kind      ExportKind  @default(WP_THEME)
  zipPath   String      // Path to exported ZIP
  sizeKB    Int         // File size in KB
  checksum  String      // File integrity checksum
  createdAt DateTime    @default(now())
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("exports")
}

model ChatMessage {
  id        String      @id @default(cuid())
  projectId String?
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())
  
  project   Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

enum ExportKind {
  WP_THEME
}

enum MessageRole {
  USER
  ASSISTANT
  TOOL
}