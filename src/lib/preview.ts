import JSZip from 'jszip';
import type { GeneratedTheme, Project } from '@/types';\n\nexport interface PreviewData {\n  html: string;\n  css: string;\n}\n\nexport interface WordPressPreviewData {\n  themeZip: ArrayBuffer;\n  playgroundUrl: string;\n}\n\n// Generate HTML preview from theme data\nexport function generateHTMLPreview(theme: GeneratedTheme, project: Project): PreviewData {\n  const html = generatePreviewHTML(theme, project);\n  const css = generatePreviewCSS(theme.themeJson);\n  \n  return { html, css };\n}\n\n// Generate complete HTML document for preview\nfunction generatePreviewHTML(theme: GeneratedTheme, project: Project): string {\n  const { patterns, templateFront } = theme;\n  \n  // Extract section order from template\n  const sections = templateFront.match(/slug\":\"([^\"]+)\"/g)?.map(match => \n    match.replace('slug\":\"', '').replace('\"', '')\n  ) || [];\n\n  // Combine patterns based on section order\n  let combinedHTML = '';\n  \n  sections.forEach(sectionSlug => {\n    const pattern = patterns.find(p => p.slug === sectionSlug);\n    if (pattern) {\n      // Convert WordPress blocks to HTML\n      const convertedHTML = convertBlocksToHTML(pattern.html, project);\n      combinedHTML += `<section class=\"wp-block-section\" data-section=\"${sectionSlug}\">\n${convertedHTML}\n</section>\n`;\n    }\n  });\n\n  // If no sections found, combine all patterns\n  if (!combinedHTML.trim()) {\n    combinedHTML = patterns.map(p => {\n      const convertedHTML = convertBlocksToHTML(p.html, project);\n      return `<section class=\"wp-block-section\" data-section=\"${p.slug}\">\n${convertedHTML}\n</section>`;\n    }).join('\n');\n  }\n\n  // Create complete HTML document\n  return `<!DOCTYPE html>\n<html lang=\"${project.locale || 'en'}\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${project.name} - Preview</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    ${generateFontLinks(theme.themeJson)}\n</head>\n<body class=\"preview-body\">\n    ${combinedHTML}\n</body>\n</html>`;\n}\n\n// Convert WordPress block markup to HTML\nfunction convertBlocksToHTML(blockHTML: string, project: Project): string {\n  let html = blockHTML;\n  \n  // Remove WordPress comments\n  html = html.replace(/<!-- \\/?wp:[^>]+ -->/g, '');\n  \n  // Convert block classes to semantic HTML\n  html = html.replace(/class=\"wp-block-([^\"]+)\"/g, (match, blockType) => {\n    return `class=\"block-${blockType.replace(/\\//g, '-')}\"`;\n  });\n  \n  // Replace site-specific placeholders\n  html = html.replace(/\\{\\{siteName\\}\\}/g, project.name);\n  html = html.replace(/\\{\\{siteTagline\\}\\}/g, project.sector || '');\n  \n  // Convert asset paths\n  if (project.brand?.logoPath) {\n    html = html.replace(/{{logoUrl}}/g, `/uploads/${project.brand.logoPath}`);\n  }\n  \n  if (project.assets?.heroPath) {\n    html = html.replace(/{{heroUrl}}/g, `/uploads/${project.assets.heroPath}`);\n  }\n  \n  return html;\n}\n\n// Generate CSS from theme.json\nfunction generatePreviewCSS(themeJson: any): string {\n  if (!themeJson?.settings) return '';\n\n  const { color, typography, spacing } = themeJson.settings;\n  let css = ':root {\\n';\n\n  // Color variables\n  if (color?.palette) {\n    color.palette.forEach((colorDef: any) => {\n      css += `  --wp--preset--color--${colorDef.slug}: ${colorDef.color};\\n`;\n    });\n  }\n\n  // Font variables\n  if (typography?.fontFamilies) {\n    typography.fontFamilies.forEach((font: any) => {\n      css += `  --wp--preset--font-family--${font.slug}: ${font.fontFamily};\\n`;\n    });\n  }\n\n  // Font size variables\n  if (typography?.fontSizes) {\n    typography.fontSizes.forEach((size: any) => {\n      css += `  --wp--preset--font-size--${size.slug}: ${size.size};\\n`;\n    });\n  }\n\n  css += '}\\n\\n';\n\n  // Base styles\n  css += `\n/* Reset and base styles */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: var(--wp--preset--font-family--body, system-ui, sans-serif);\n  font-size: var(--wp--preset--font-size--medium, 16px);\n  line-height: 1.6;\n  color: var(--wp--preset--color--text, #1f2937);\n  background-color: var(--wp--preset--color--background, #ffffff);\n}\n\n/* Block styles */\n.wp-block-section {\n  width: 100%;\n}\n\n.block-group {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.block-cover {\n  position: relative;\n  min-height: 50vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-size: cover;\n  background-position: center;\n  color: white;\n  text-align: center;\n  padding: 60px 20px;\n}\n\n.block-cover img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  z-index: -1;\n}\n\n.block-columns {\n  display: flex;\n  gap: 2rem;\n  flex-wrap: wrap;\n  margin: 40px 0;\n}\n\n.block-column {\n  flex: 1;\n  min-width: 250px;\n}\n\n.block-heading {\n  margin: 0 0 1rem 0;\n  font-family: var(--wp--preset--font-family--heading, inherit);\n  font-weight: 700;\n}\n\n.block-heading h1 {\n  font-size: var(--wp--preset--font-size--xx-large, 48px);\n  line-height: 1.2;\n}\n\n.block-heading h2 {\n  font-size: var(--wp--preset--font-size--x-large, 32px);\n  line-height: 1.3;\n}\n\n.block-heading h3 {\n  font-size: var(--wp--preset--font-size--large, 20px);\n  line-height: 1.4;\n}\n\n.block-paragraph {\n  margin: 0 0 1rem 0;\n}\n\n.block-buttons {\n  display: flex;\n  gap: 1rem;\n  flex-wrap: wrap;\n  margin: 2rem 0;\n}\n\n.block-button {\n  display: inline-block;\n}\n\n.block-button a {\n  display: inline-block;\n  padding: 12px 24px;\n  text-decoration: none;\n  border-radius: 6px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.block-image {\n  margin: 2rem 0;\n}\n\n.block-image img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 8px;\n}\n\n/* Color utilities */\n.has-primary-background-color {\n  background-color: var(--wp--preset--color--primary) !important;\n}\n\n.has-secondary-background-color {\n  background-color: var(--wp--preset--color--secondary) !important;\n}\n\n.has-neutral-background-color {\n  background-color: var(--wp--preset--color--neutral) !important;\n}\n\n.has-white-color {\n  color: white !important;\n}\n\n.has-primary-color {\n  color: var(--wp--preset--color--primary) !important;\n}\n\n/* Text alignment */\n.has-text-align-center {\n  text-align: center;\n}\n\n.has-text-align-left {\n  text-align: left;\n}\n\n.has-text-align-right {\n  text-align: right;\n}\n\n/* Font sizes */\n.has-x-large-font-size {\n  font-size: var(--wp--preset--font-size--x-large) !important;\n}\n\n.has-xx-large-font-size {\n  font-size: var(--wp--preset--font-size--xx-large) !important;\n}\n\n.has-large-font-size {\n  font-size: var(--wp--preset--font-size--large) !important;\n}\n\n.has-medium-font-size {\n  font-size: var(--wp--preset--font-size--medium) !important;\n}\n\n.has-small-font-size {\n  font-size: var(--wp--preset--font-size--small) !important;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .block-columns {\n    flex-direction: column;\n  }\n  \n  .block-cover {\n    min-height: 40vh;\n    padding: 40px 20px;\n  }\n  \n  .block-group {\n    padding: 0 15px;\n  }\n  \n  .has-xx-large-font-size {\n    font-size: var(--wp--preset--font-size--x-large) !important;\n  }\n}\n\n/* Spacing utilities */\n.has-spacing-top {\n  padding-top: 80px;\n}\n\n.has-spacing-bottom {\n  padding-bottom: 80px;\n}\n\n@media (max-width: 768px) {\n  .has-spacing-top {\n    padding-top: 40px;\n  }\n  \n  .has-spacing-bottom {\n    padding-bottom: 40px;\n  }\n}\n`;\n\n  return css;\n}\n\n// Generate Google Fonts links\nfunction generateFontLinks(themeJson: any): string {\n  if (!themeJson?.settings?.typography?.fontFamilies) return '';\n  \n  const fonts = themeJson.settings.typography.fontFamilies;\n  const googleFonts: string[] = [];\n  \n  fonts.forEach((font: any) => {\n    // Check if it's a Google Font (not system fonts)\n    if (font.family && \n        !font.family.includes('system-ui') && \n        !font.family.includes('serif') &&\n        !font.family.toLowerCase().includes('arial') &&\n        !font.family.toLowerCase().includes('helvetica')) {\n      const fontName = font.family.split(',')[0].replace(/[\"']/g, '').trim();\n      googleFonts.push(fontName);\n    }\n  });\n  \n  if (googleFonts.length === 0) return '';\n  \n  const uniqueFonts = [...new Set(googleFonts)];\n  const fontQuery = uniqueFonts.map(font => \n    `${font.replace(/ /g, '+')}:wght@400;500;600;700`\n  ).join('&family=');\n  \n  return `<link href=\"https://fonts.googleapis.com/css2?family=${fontQuery}&display=swap\" rel=\"stylesheet\">`;\n}\n\n// Generate WordPress theme ZIP for Playground\nexport async function generateWordPressThemeZip(\n  theme: GeneratedTheme, \n  project: Project\n): Promise<ArrayBuffer> {\n  const zip = new JSZip();\n  const themeSlug = project.slug + '-landing';\n  const themeFolder = zip.folder(themeSlug);\n  \n  if (!themeFolder) {\n    throw new Error('Failed to create theme folder');\n  }\n\n  // Generate style.css with WordPress header\n  const styleCSS = `/*\nTheme Name: ${project.name} Landing\nAuthor: ${project.name}\nDescription: Landing page theme for ${project.name}\nVersion: 1.0.0\nRequires at least: 6.5\nRequires PHP: 7.4\nText Domain: ${themeSlug}\n*/\n\n/* Theme styles are handled by theme.json */`;\n  \n  themeFolder.file('style.css', styleCSS);\n\n  // Generate functions.php\n  const functionsPhp = `<?php\n/**\n * Theme functions\n */\n\nif (!function_exists('${project.slug.replace(/-/g, '_')}_setup')) {\n    function ${project.slug.replace(/-/g, '_')}_setup() {\n        add_theme_support('wp-block-styles');\n        add_theme_support('responsive-embeds');\n        add_theme_support('editor-styles');\n        add_theme_support('align-wide');\n    }\n}\nadd_action('after_setup_theme', '${project.slug.replace(/-/g, '_')}_setup');\n\nfunction ${project.slug.replace(/-/g, '_')}_enqueue_styles() {\n    wp_enqueue_style(\n        '${themeSlug}-style',\n        get_stylesheet_uri(),\n        array(),\n        wp_get_theme()->get('Version')\n    );\n}\nadd_action('wp_enqueue_scripts', '${project.slug.replace(/-/g, '_')}_enqueue_styles');\n`;\n  \n  themeFolder.file('functions.php', functionsPhp);\n\n  // Generate theme.json\n  themeFolder.file('theme.json', JSON.stringify(theme.themeJson, null, 2));\n\n  // Generate templates\n  const templatesFolder = themeFolder.folder('templates');\n  if (templatesFolder) {\n    templatesFolder.file('front-page.html', theme.templateFront);\n    templatesFolder.file('index.html', theme.templateFront);\n  }\n\n  // Generate template parts\n  const partsFolder = themeFolder.folder('parts');\n  if (partsFolder) {\n    const headerPattern = theme.patterns.find(p => p.slug === 'header');\n    const footerPattern = theme.patterns.find(p => p.slug === 'footer');\n    \n    if (headerPattern) {\n      partsFolder.file('header.html', headerPattern.html);\n    }\n    \n    if (footerPattern) {\n      partsFolder.file('footer.html', footerPattern.html);\n    }\n  }\n\n  // Generate patterns\n  const patternsFolder = themeFolder.folder('patterns');\n  if (patternsFolder) {\n    theme.patterns.forEach(pattern => {\n      if (pattern.slug !== 'header' && pattern.slug !== 'footer') {\n        const patternContent = `<?php\n/**\n * Title: ${pattern.title}\n * Slug: ${themeSlug}/${pattern.slug}\n * Categories: featured\n */\n?>\n${pattern.html}`;\n        \n        patternsFolder.file(`${pattern.slug}.php`, patternContent);\n      }\n    });\n  }\n\n  // Add assets if they exist\n  const assetsFolder = themeFolder.folder('assets');\n  if (assetsFolder && (project.brand?.logoPath || project.assets?.heroPath)) {\n    // Note: In a real implementation, you would copy the actual files here\n    // For now, we'll create placeholder files\n    if (project.brand?.logoPath) {\n      assetsFolder.file('logo.svg', '<!-- Logo placeholder -->');\n    }\n    if (project.assets?.heroPath) {\n      assetsFolder.file('hero.jpg', '<!-- Hero image placeholder -->');\n    }\n  }\n\n  return await zip.generateAsync({ type: 'arraybuffer' });\n}\n\n// Generate WordPress Playground URL\nexport function generatePlaygroundURL(project: Project): string {\n  const baseUrl = 'https://playground.wordpress.net';\n  const config = {\n    landingPage: '/',\n    features: {\n      networking: true\n    },\n    steps: [\n      {\n        step: 'login',\n        username: 'admin',\n        password: 'password'\n      },\n      {\n        step: 'installTheme',\n        themeZipFile: {\n          resource: 'wordpress.org/themes',\n          slug: 'twentytwentyfour'\n        }\n      }\n    ]\n  };\n  \n  return `${baseUrl}?${new URLSearchParams({\n    mode: 'seamless',\n    config: JSON.stringify(config)\n  }).toString()}`;\n}"