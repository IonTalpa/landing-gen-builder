import JSZip from 'jszip';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { config } from './config';
import type { GeneratedTheme, Project, Export } from '@/types';

export interface ExportOptions {
  includeAssets?: boolean;
  stripExif?: boolean;
  validateContent?: boolean;
}

export interface ExportResult {
  zipPath: string;
  sizeKB: number;
  checksum: string;
  downloadUrl: string;
  themeInfo: {
    name: string;
    slug: string;
    version: string;
    author: string;
  };
}

export class ExportError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'ExportError';
  }
}

// Forbidden words that should not appear in exported themes
const FORBIDDEN_WORDS = [
  'ai', 'gpt', 'generator', 'artificial', 'intelligence', 
  'chatgpt', 'openai', 'claude', 'anthropic', 'machine learning',
  'neural network', 'deep learning', 'language model',
  'generated by', 'auto-generated', 'ai-powered'
];

// Scan content for forbidden words
export function scanForForbiddenWords(content: string): { found: boolean; words: string[] } {
  const foundWords: string[] = [];
  const lowerContent = content.toLowerCase();
  
  const allForbiddenWords = [...FORBIDDEN_WORDS, ...config.exports.forbiddenWords];
  
  allForbiddenWords.forEach(word => {
    if (lowerContent.includes(word.toLowerCase())) {
      foundWords.push(word);
    }
  });
  
  return {
    found: foundWords.length > 0,
    words: foundWords
  };
}

// Generate WordPress theme structure
export async function generateWordPressTheme(
  theme: GeneratedTheme,
  project: Project,
  options: ExportOptions = {}
): Promise<ExportResult> {
  const {
    includeAssets = true,
    stripExif = true,
    validateContent = true
  } = options;
  
  const themeSlug = project.slug + '-landing';
  const themeInfo = {
    name: `${project.name} Landing`,
    slug: themeSlug,
    version: '1.0.0',
    author: 'Aydin'
  };
  
  // Validate content for forbidden words
  if (validateContent) {
    const contentToCheck = [
      JSON.stringify(theme.themeJson),
      JSON.stringify(theme.patterns),
      theme.templateFront
    ].join(' ');
    
    const scanResult = scanForForbiddenWords(contentToCheck);
    if (scanResult.found) {
      throw new ExportError(
        `Forbidden words found in theme content: ${scanResult.words.join(', ')}`,
        'FORBIDDEN_WORDS_FOUND'
      );
    }
  }
  
  const zip = new JSZip();
  const themeFolder = zip.folder(themeSlug);
  
  if (!themeFolder) {
    throw new ExportError('Failed to create theme folder in ZIP', 'ZIP_CREATION_FAILED');
  }

  // Generate style.css with WordPress header
  const styleCSS = generateStyleCSS(themeInfo, project);
  themeFolder.file('style.css', styleCSS);

  // Generate functions.php
  const functionsPhp = generateFunctionsPhp(themeSlug, project);
  themeFolder.file('functions.php', functionsPhp);

  // Generate theme.json
  themeFolder.file('theme.json', JSON.stringify(theme.themeJson, null, 2));

  // Generate templates
  const templatesFolder = themeFolder.folder('templates');
  if (templatesFolder) {
    templatesFolder.file('front-page.html', theme.templateFront);
    templatesFolder.file('index.html', theme.templateFront);
    templatesFolder.file('home.html', theme.templateFront);
    templatesFolder.file('page.html', theme.templateFront);
  }

  // Generate template parts
  const partsFolder = themeFolder.folder('parts');
  if (partsFolder) {
    const headerPattern = theme.patterns.find(p => p.slug === 'header');
    const footerPattern = theme.patterns.find(p => p.slug === 'footer');
    
    if (headerPattern) {
      partsFolder.file('header.html', headerPattern.html);
    } else {
      partsFolder.file('header.html', generateDefaultHeader(project));
    }
    
    if (footerPattern) {
      partsFolder.file('footer.html', footerPattern.html);
    } else {
      partsFolder.file('footer.html', generateDefaultFooter(project));
    }
  }

  // Generate patterns
  const patternsFolder = themeFolder.folder('patterns');
  if (patternsFolder) {
    theme.patterns.forEach(pattern => {
      if (pattern.slug !== 'header' && pattern.slug !== 'footer') {
        const patternContent = generatePatternFile(pattern, themeSlug);
        patternsFolder.file(`${pattern.slug}.php`, patternContent);
      }
    });
  }

  // Add assets if they exist and are requested
  if (includeAssets) {
    await addAssetsToZip(themeFolder, project, stripExif);
  }
  
  // Generate screenshot.png (placeholder)
  const screenshotContent = generateScreenshotPlaceholder();
  themeFolder.file('screenshot.png', screenshotContent, { base64: true });
  
  // Generate README.txt
  const readmeContent = generateReadme(themeInfo, project);
  themeFolder.file('readme.txt', readmeContent);

  // Generate ZIP file
  const zipBuffer = await zip.generateAsync({ 
    type: 'nodebuffer',
    compression: 'DEFLATE',
    compressionOptions: { level: 6 }
  });
  
  // Ensure export directory exists
  const exportDir = path.join(config.exports.dir, project.slug);
  await fs.promises.mkdir(exportDir, { recursive: true });
  
  // Generate file name with timestamp
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const fileName = `${themeSlug}-${timestamp}.zip`;
  const zipPath = path.join(exportDir, fileName);
  
  // Write ZIP file
  await fs.promises.writeFile(zipPath, zipBuffer);
  
  // Calculate file info
  const stats = await fs.promises.stat(zipPath);
  const sizeKB = Math.round(stats.size / 1024);
  const checksum = crypto.createHash('sha256').update(zipBuffer).digest('hex');
  
  return {
    zipPath: path.relative(process.cwd(), zipPath),
    sizeKB,
    checksum,
    downloadUrl: `/api/download/${project.slug}/${fileName}`,
    themeInfo
  };
}

// Generate style.css with WordPress theme header
function generateStyleCSS(themeInfo: any, project: Project): string {
  return `/*
Theme Name: ${themeInfo.name}
Description: Professional landing page theme for ${project.name}. Built with WordPress block editor for maximum flexibility and customization.
Author: ${themeInfo.author}
Version: ${themeInfo.version}
Requires at least: 6.5
Tested up to: 6.4
Requires PHP: 7.4
License: GPL v2 or later
License URI: https://www.gnu.org/licenses/gpl-2.0.html
Text Domain: ${themeInfo.slug}
Tags: landing-page, business, portfolio, block-theme, custom-colors, custom-menu, featured-images, full-site-editing, rtl-language-support, threaded-comments, translation-ready
*/

/*
 * Theme styles are primarily handled through theme.json and block patterns.
 * This file serves as the theme identifier for WordPress.
 */

body {
  margin: 0;
  padding: 0;
}`;
}

// Generate functions.php
function generateFunctionsPhp(themeSlug: string, project: Project): string {
  const functionPrefix = project.slug.replace(/-/g, '_');
  
  return `<?php
/**
 * ${project.name} Landing Theme Functions
 * 
 * @package ${themeSlug}
 * @since 1.0.0
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Theme setup
 */
if (!function_exists('${functionPrefix}_setup')) {
    function ${functionPrefix}_setup() {
        // Add theme support for various features
        add_theme_support('wp-block-styles');
        add_theme_support('responsive-embeds');
        add_theme_support('editor-styles');
        add_theme_support('align-wide');
        add_theme_support('custom-logo');
        add_theme_support('post-thumbnails');
        add_theme_support('custom-background');
        add_theme_support('html5', array(
            'comment-list',
            'comment-form',
            'search-form',
            'gallery',
            'caption',
            'script',
            'style'
        ));
        
        // Register navigation menus
        register_nav_menus(array(
            'primary' => __('Primary Menu', '${themeSlug}'),
            'footer' => __('Footer Menu', '${themeSlug}'),
        ));
    }
}
add_action('after_setup_theme', '${functionPrefix}_setup');

/**
 * Enqueue theme styles
 */
function ${functionPrefix}_enqueue_styles() {
    wp_enqueue_style(
        '${themeSlug}-style',
        get_stylesheet_uri(),
        array(),
        wp_get_theme()->get('Version')
    );
}
add_action('wp_enqueue_scripts', '${functionPrefix}_enqueue_styles');

/**
 * Register block patterns
 */
function ${functionPrefix}_register_patterns() {
    if (function_exists('register_block_pattern_category')) {
        register_block_pattern_category(
            '${themeSlug}',
            array('label' => __('${project.name} Patterns', '${themeSlug}'))
        );
    }
}
add_action('init', '${functionPrefix}_register_patterns');
`;
}

// Generate pattern file
function generatePatternFile(pattern: any, themeSlug: string): string {
  return `<?php
/**
 * Title: ${pattern.title}
 * Slug: ${themeSlug}/${pattern.slug}
 * Categories: ${themeSlug}
 * Description: ${pattern.title} section for landing page
 */
?>
${pattern.html}`;
}

// Generate default header
function generateDefaultHeader(project: Project): string {
  return `<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"}}},\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->
<div class=\"wp-block-group\" style=\"padding-top:20px;padding-bottom:20px\">
    <!-- wp:site-logo {\"width\":120} /-->
    <!-- wp:navigation {\"overlayMenu\":\"mobile\"} /-->
</div>
<!-- /wp:group -->`;
}

// Generate default footer
function generateDefaultFooter(project: Project): string {
  return `<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"40px\",\"bottom\":\"40px\"}}},\"backgroundColor\":\"neutral\",\"textColor\":\"white\",\"layout\":{\"type\":\"constrained\"}} -->
<div class=\"wp-block-group has-white-color has-neutral-background-color has-text-color has-background\" style=\"padding-top:40px;padding-bottom:40px\">
    <!-- wp:paragraph {\"align\":\"center\"} -->
    <p class=\"has-text-align-center\">© ${new Date().getFullYear()} ${project.name}. All rights reserved.</p>
    <!-- /wp:paragraph -->
</div>
<!-- /wp:group -->`;
}

// Add assets to ZIP
async function addAssetsToZip(themeFolder: JSZip, project: Project, stripExif: boolean): Promise<void> {
  const assetsFolder = themeFolder.folder('assets');
  if (!assetsFolder) return;
  
  try {
    // Add logo if exists
    if (project.brand?.logoPath) {
      const logoPath = path.join(config.uploads.dir, project.brand.logoPath);
      const logoExists = await fs.promises.access(logoPath).then(() => true).catch(() => false);
      
      if (logoExists) {
        let logoBuffer = await fs.promises.readFile(logoPath);
        
        // Strip EXIF if requested and not SVG
        if (stripExif && !project.brand.logoPath.toLowerCase().endsWith('.svg')) {
          const { stripExifData } = await import('./upload');
          logoBuffer = await stripExifData(logoBuffer, 'image/jpeg');
        }
        
        const logoExt = path.extname(project.brand.logoPath);
        assetsFolder.file(`logo${logoExt}`, logoBuffer);
      }
    }
    
    // Add hero image if exists
    if (project.assets?.heroPath) {
      const heroPath = path.join(config.uploads.dir, project.assets.heroPath);
      const heroExists = await fs.promises.access(heroPath).then(() => true).catch(() => false);
      
      if (heroExists) {
        let heroBuffer = await fs.promises.readFile(heroPath);
        
        // Strip EXIF if requested
        if (stripExif) {
          const { stripExifData } = await import('./upload');
          heroBuffer = await stripExifData(heroBuffer, 'image/jpeg');
        }
        
        const heroExt = path.extname(project.assets.heroPath);
        assetsFolder.file(`hero${heroExt}`, heroBuffer);
      }
    }
    
    // Add gallery images if exist
    if (project.assets?.galleryPaths && Array.isArray(project.assets.galleryPaths)) {
      for (let i = 0; i < project.assets.galleryPaths.length; i++) {
        const galleryPath = project.assets.galleryPaths[i];
        const fullPath = path.join(config.uploads.dir, galleryPath as string);
        const exists = await fs.promises.access(fullPath).then(() => true).catch(() => false);
        
        if (exists) {
          let buffer = await fs.promises.readFile(fullPath);
          
          if (stripExif) {
            const { stripExifData } = await import('./upload');
            buffer = await stripExifData(buffer, 'image/jpeg');
          }
          
          const ext = path.extname(galleryPath as string);
          assetsFolder.file(`gallery-${i + 1}${ext}`, buffer);
        }
      }
    }
  } catch (error) {
    console.warn('Failed to add some assets to ZIP:', error);
  }
}

// Generate placeholder screenshot
function generateScreenshotPlaceholder(): string {
  // Base64 encoded 1200x900 placeholder image
  return 'iVBORw0KGgoAAAANSUhEUgAABLAAAAOFCAYAAADd06bzAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANYSURBVHic7dJBDQAACAOg/f/ndQrA2oaA3w9x9h4AAAAAADjmAAAAAAAAgGMAAAAAAAAAcAAAAAAAAAAwAAAAAAAAwAAAAAAAAAIAAAAAAACAAQAAAAAAAAYAAAAAAAAABgAAAAAAAABgAAAAAAAAEAAAAAAAwAAAAAAA';
}

// Generate README.txt
function generateReadme(themeInfo: any, project: Project): string {
  return `=== ${themeInfo.name} ===
Contributors: ${themeInfo.author.toLowerCase()}
Tags: landing-page, business, block-theme, full-site-editing
Requires at least: 6.5
Tested up to: 6.4
Requires PHP: 7.4
Stable tag: ${themeInfo.version}
License: GPLv2 or later
License URI: https://www.gnu.org/licenses/gpl-2.0.html

A professional landing page theme for ${project.name}.

== Description ==

${themeInfo.name} is a modern, responsive WordPress block theme designed specifically for creating stunning landing pages. Built with the WordPress block editor (Gutenberg) for maximum flexibility and customization.

Features:
* Full Site Editing support
* Responsive design
* Custom block patterns
* Multiple color schemes
* Typography options
* SEO optimized

== Installation ==

1. Upload the theme folder to /wp-content/themes/
2. Activate the theme through the 'Themes' menu in WordPress
3. Customize your site using the Site Editor

== Changelog ==

= ${themeInfo.version} =
* Initial release
`;
}"