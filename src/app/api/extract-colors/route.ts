import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '@/lib/auth';
import { prisma } from '@/lib/db';
import { config } from '@/lib/config';
import path from 'path';
import Vibrant from 'node-vibrant';\n\nexport async function POST(request: NextRequest) {\n  try {\n    await requireAuth();\n\n    const { logoPath } = await request.json();\n\n    if (!logoPath) {\n      return NextResponse.json(\n        { success: false, error: 'Logo path is required' },\n        { status: 400 }\n      );\n    }\n\n    // Build full path to the logo file\n    const fullPath = path.join(config.uploads.dir, logoPath);\n\n    try {\n      // Extract colors using node-vibrant\n      const palette = await Vibrant.from(fullPath).getPalette();\n\n      // Convert vibrant palette to our format\n      const extractedColors = [];\n\n      if (palette.Vibrant) {\n        extractedColors.push({\n          name: 'primary',\n          color: palette.Vibrant.hex,\n          population: palette.Vibrant.population,\n        });\n      }\n\n      if (palette.DarkVibrant) {\n        extractedColors.push({\n          name: 'secondary',\n          color: palette.DarkVibrant.hex,\n          population: palette.DarkVibrant.population,\n        });\n      }\n\n      if (palette.LightVibrant) {\n        extractedColors.push({\n          name: 'accent',\n          color: palette.LightVibrant.hex,\n          population: palette.LightVibrant.population,\n        });\n      }\n\n      if (palette.Muted) {\n        extractedColors.push({\n          name: 'neutral',\n          color: palette.Muted.hex,\n          population: palette.Muted.population,\n        });\n      }\n\n      // If we don't have enough colors, add some defaults\n      const defaultColors = ['#3b82f6', '#10b981', '#f59e0b', '#6b7280'];\n      while (extractedColors.length < 4) {\n        extractedColors.push({\n          name: `color${extractedColors.length + 1}`,\n          color: defaultColors[extractedColors.length] || '#6b7280',\n          population: 0,\n        });\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          colors: extractedColors,\n          originalPalette: {\n            vibrant: palette.Vibrant?.hex,\n            darkVibrant: palette.DarkVibrant?.hex,\n            lightVibrant: palette.LightVibrant?.hex,\n            muted: palette.Muted?.hex,\n            darkMuted: palette.DarkMuted?.hex,\n            lightMuted: palette.LightMuted?.hex,\n          },\n        },\n      });\n\n    } catch (vibrantError) {\n      console.error('Color extraction failed:', vibrantError);\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Failed to extract colors from image. Please ensure the image is valid.' \n        },\n        { status: 400 }\n      );\n    }\n\n  } catch (error) {\n    console.error('Extract colors error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Color extraction failed' },\n      { status: 500 }\n    );\n  }\n}"}